@model GanaderiaLasDelicias.Models.DashboardViewModel
@{
    ViewData["Title"] = "Ganadería las Delicias";
}

        <!-- Small boxes (Stat box) -->
        <div class="row">

    <!-- Tarjeta para empleados activos -->
    <div class="col-lg-3 col-6">
        <div class="small-box bg-info">
            <div class="inner">
                <h3>@Model.ActiveEmployeesCount</h3>
                <p>Empleados Activos</p>
            </div>
            <div class="icon">
                <i class="ion ion-person"></i>
            </div>
            <a href="@Url.Action("Index", "Employees")" class="small-box-footer">
                Más información <i class="fas fa-arrow-circle-right"></i>
            </a>
        </div>
    </div>
    <!-- Tarjeta para cantidad de pagos -->
    <div class="col-lg-3 col-6">
        <div class="small-box bg-success">
            <div class="inner">
                <h3>@Model.PaymentsCount</h3>
                <p>Pagos Realizados</p>
            </div>
            <div class="icon">
                <i class="ion ion-cash"></i>
            </div>
            <a href="@Url.Action("Index", "SalaryRecords")" class="small-box-footer">
                Más Información <i class="fas fa-arrow-circle-right"></i>
            </a>
        </div>
    </div>
    <!-- Tarjeta para cantidad de vacas -->
    <div class="col-lg-3 col-6">
        <div class="small-box bg-warning">
            <div class="inner">
                <h3>@Model.CowsCount</h3>
                <p>Vacas</p>
            </div>
            <div class="icon">
                <i class="ion ion-android-walk"></i>
            </div>
            <a href="@Url.Action("Index", "Herd")" class="small-box-footer">
                Más Información <i class="fas fa-arrow-circle-right"></i>
            </a>
        </div>
    </div>
    <!-- Tarjeta para vacas preñadas -->
    <div class="col-lg-3 col-6">
        <div class="small-box bg-danger">
            <div class="inner">
                <h3>@Model.PregnantCowsCount</h3>
                <p>Vacas Preñadas</p>
            </div>
            <div class="icon">
                <i class="ion ion-ios-heart"></i>
            </div>
            <a href="@Url.Action("Index", "Pregnancies")" class="small-box-footer">
                Más Información <i class="fas fa-arrow-circle-right"></i>
            </a>
        </div>
    </div>
          <!-- ./col -->
        </div>
        <!-- /.row -->
        <!-- Main row -->
        <div class="row">
          <!-- Left col -->
          <section class="col-lg-7 connectedSortable">
            <!-- Custom tabs (Charts with tabs)-->
        <!-- Nueva sección para el iframe -->
 

        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Horas de Pastoreo por Vaca</h3>
            </div>
            <div class="card-body">
                <canvas id="grazingChart" width="400" height="200"></canvas>
            </div>
        </div>

        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const ctx = document.getElementById('grazingChart').getContext('2d');

                // Datos de ejemplo para las vacas y las horas de pastoreo
                const cowNames = ['Vaca 1', 'Vaca 2', 'Vaca 3', 'Vaca 4'];
                const grazingHours = [5, 8, 6, 7];  // Horas de pastoreo correspondientes

                // Crear el gráfico de líneas
                const grazingChart = new Chart(ctx, {
                    type: 'line',  // Tipo de gráfico: línea
                    data: {
                        labels: cowNames,
                        datasets: [{
                            label: 'Horas de Pastoreo',
                            data: grazingHours,
                            backgroundColor: 'rgba(54, 162, 235, 0.2)',  // Color de fondo del área bajo la línea
                            borderColor: 'rgba(54, 162, 235, 1)',  // Color de la línea
                            borderWidth: 1,
                            fill: false  // No llenar el área bajo la línea
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Horas'
                                }
                            },
                            x: {
                                title: {
                                    display: true,
                                    text: 'Nombre de la Vaca'
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top',
                            },
                            tooltip: {
                                callbacks: {
                                    label: function (tooltipItem) {
                                        return `${tooltipItem.label}: ${tooltipItem.raw} horas`;
                                    }
                                }
                            }
                        }
                    }
                });
            });
        </script>
        <!-- Incluye Chart.js -->
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

 
            <!-- /.card -->
          </section>
          <!-- right col -->
        </div>
        <!-- /.row (main row) -->
      <!-- /.container-fluid -->
    </section>
    <!-- /.content -->
<!-- Asegúrate de incluir Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var ctx = document.getElementById('revenue-chart-canvas').getContext('2d');

        var paymentData = @Html.Raw(Json.Serialize(Model.PaymentData));

        var chart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: paymentData.map(pd => pd.Date),
                datasets: [{
                    label: 'Total Amount',
                    data: paymentData.map(pd => pd.TotalAmount),
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    });
</script>

        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Contenido de la Leche</h3>
            </div>
            <div class="card-body">
                <canvas id="milkContentChart" width="400" height="200"></canvas>
            </div>
        </div>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    var ctx = document.getElementById('milkContentChart').getContext('2d');
    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ['Grasa', 'Proteína', 'Lactosa'],
            datasets: [{
                label: 'Porcentaje de Contenido',
                data: [
    @Model.FatPercentage,
    @Model.ProteinPercentage,
    @Model.LactosePercentage
                    ],
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
</script>


<!-- Agregar el gráfico de estado de salud -->
<div class="card">
    <div class="card-header">
        <h3>Estado de Salúd de las Vacas</h3>
    </div>
    <div class="card-body">
        <canvas id="healthChart"></canvas>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var ctx = document.getElementById('healthChart').getContext('2d');
        var healthStatusCounts = @Html.Raw(Json.Serialize(Model.HealthStatusCounts));

        var data = {
            labels: Object.keys(healthStatusCounts),
            datasets: [{
                label: 'Number of Cows',
                data: Object.values(healthStatusCounts),
                backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56'], // Colores para las secciones del gráfico
                borderColor: 'rgba(0,0,0,0.1)',
                borderWidth: 1
            }]
        };

        var config = {
            type: 'pie',
            data: data,
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                var label = context.label || '';
                                if (label) {
                                    label += ': ' + context.raw;
                                }
                                return label;
                            }
                        }
                    }
                }
            }
        };

        new Chart(ctx, config);
    });
</script>



<script>
    document.addEventListener('DOMContentLoaded', () => {
        const ctx = document.getElementById('grazingChart').getContext('2d');

        // Obtén los datos desde el modelo
        const feedingData = @Html.Raw(Json.Serialize(Model.FeedingData));

        // Extrae nombres de vacas y horas de pastoreo
        const cowNames = feedingData.map(item => item.cowName);
        const grazingHours = feedingData.map(item => item.grazingHours);

        // Crear el gráfico de líneas
        const grazingChart = new Chart(ctx, {
            type: 'line',  // Tipo de gráfico: línea
            data: {
                labels: cowNames,
                datasets: [{
                    label: 'Horas de Pastoreo',
                    data: grazingHours,
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',  // Color de fondo del área bajo la línea
                    borderColor: 'rgba(54, 162, 235, 1)',  // Color de la línea
                    borderWidth: 1,
                    fill: false  // No llenar el área bajo la línea
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Horas'
                        }
                    },
                    x: {
                        title: {
                            display: true,
                            text: 'Nombre de la Vaca'
                        }
                    }
                },
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                return `${tooltipItem.label}: ${tooltipItem.raw} horas`;
                            }
                        }
                    }
                }
            }
        });
    });
</script>
<!-- Incluye Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
